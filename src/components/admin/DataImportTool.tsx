import React, { useState, useRef } from 'react';
import { v4 as uuidv4 } from 'uuid';
import { importFromExcel } from '../../utils/dataImport/excelImporter';
import { importFromCSV } from '../../utils/dataImport/csvImporter';
import { routeImport } from '../../utils/dataImport/importRouter';
import CSVDataInspector from './CSVDataInspector';
import { useData } from '../../context/DataContext';
import { supabase } from '../../lib/supabaseClient';
import { Card } from '../ui/shadcn-card';
import Button from '../ui/Button';
import Select from '../ui/Select';
import ImportFormatGuide from './ImportFormatGuide';
import { Upload, CheckCircle, AlertCircle, FileText, Database, FileSpreadsheet, HelpCircle, Users, FileX, DollarSign, Calendar, ChevronDown, ChevronUp } from 'lucide-react';

// Function to save contacts to Supabase
const saveContactsToSupabase = async (contacts: any[]) => {
  // 'Saving contacts to Supabase:', contacts);
  
  if (contacts.length === 0) {
    return { success: true, saved: 0 };
  }

  // Transform contacts to match Supabase schema
  const supabaseContacts = contacts.map(contact => ({
    name: contact.name || 'Unknown Contact',
    role: contact.role || 'Other',
    email: contact.email || '',
    phone: contact.phone || null,
    company: contact.company || null,
    address: contact.address || contact.contactAddress || null,
    city: contact.city || null,
    state: contact.state || null,
    zip_code: contact.zipCode || null,
    notes: contact.notes || null
    // id, created_at, updated_at will be auto-generated by Supabase
  }));

  // 'Transformed contacts for Supabase:', supabaseContacts);

  // Use upsert to handle duplicate emails - update existing or insert new
  const { data, error } = await supabase
    .from('contacts')
    .upsert(supabaseContacts, { 
      onConflict: 'email',
      ignoreDuplicates: false // Update existing records
    })
    .select(); // Return the inserted/updated rows

  if (error) {
    // Error: 'Supabase error:', error);
    throw new Error(`Failed to save contacts: ${error.message}`);
  }

  // 'Contacts saved/updated successfully:', data);
  return { success: true, saved: data?.length || 0, data };
};

// Function to save cases to Supabase
const saveCasesToSupabase = async (cases: any[]) => {
  // 'Saving cases to Supabase:', cases);
  
  if (cases.length === 0) {
    return { success: true, saved: 0 };
  }

  // Transform cases to match Supabase schema
  const supabaseCases = cases.map(caseItem => ({
    id: caseItem.id || caseItem.caseId, // Use existing ID if available
    plaintiff: caseItem.plaintiff || 'Unknown Plaintiff',
    defendant: caseItem.defendant || 'Unknown Defendant',
    address: caseItem.address || null,
    status: caseItem.status || 'SPS NOT SERVED',
    dateFiled: caseItem.dateFiled || null
    // created_at, updated_at will be auto-generated by Supabase
  }));

  // 'Transformed cases for Supabase:', supabaseCases);

  const { data, error } = await supabase
    .from('cases')
    .upsert(supabaseCases, { 
      onConflict: 'id',
      ignoreDuplicates: false
    })
    .select();

  if (error) {
    // Error: 'Supabase error:', error);
    throw new Error(`Failed to save cases: ${error.message}`);
  }

  // 'Cases saved/updated successfully:', data);
  return { success: true, saved: data?.length || 0, data };
};

// Function to save hearings to Supabase
const saveHearingsToSupabase = async (hearings: any[]) => {
  // 'Saving hearings to Supabase:', hearings);
  
  if (hearings.length === 0) {
    return { success: true, saved: 0 };
  }

  // Transform hearings to match Supabase schema
  const supabaseHearings = hearings.map(hearing => ({
    id: hearing.id || hearing.hearingId,
    case_id: hearing.caseId || hearing.case_id || null,
    court_name: hearing.courtName || hearing.court_name || null,
    hearing_date: hearing.hearingDate || hearing.hearing_date || new Date().toISOString(),
    outcome: hearing.outcome || null
    // created_at, updated_at will be auto-generated by Supabase
  }));

  // 'Transformed hearings for Supabase:', supabaseHearings);

  const { data, error } = await supabase
    .from('hearings')
    .upsert(supabaseHearings, { 
      onConflict: 'id',
      ignoreDuplicates: false
    })
    .select();

  if (error) {
    // Error: 'Supabase error:', error);
    throw new Error(`Failed to save hearings: ${error.message}`);
  }

  // 'Hearings saved/updated successfully:', data);
  return { success: true, saved: data?.length || 0, data };
};

// Function to save documents to Supabase
const saveDocumentsToSupabase = async (documents: any[]) => {
  // 'Saving documents to Supabase:', documents);
  
  if (documents.length === 0) {
    return { success: true, saved: 0 };
  }

  // Transform documents to match Supabase schema
  const supabaseDocuments = documents.map(doc => ({
    id: doc.id || doc.docId,
    case_id: doc.caseId || doc.case_id || null,
    type: doc.type || 'Other',
    file_url: doc.fileURL || doc.file_url || '',
    status: doc.status || 'Pending',
    service_date: doc.serviceDate || doc.service_date || null
    // created_at, updated_at will be auto-generated by Supabase
  }));

  // 'Transformed documents for Supabase:', supabaseDocuments);

  const { data, error } = await supabase
    .from('documents')
    .upsert(supabaseDocuments, { 
      onConflict: 'id',
      ignoreDuplicates: false
    })
    .select();

  if (error) {
    // Error: 'Supabase error:', error);
    throw new Error(`Failed to save documents: ${error.message}`);
  }

  // 'Documents saved/updated successfully:', data);
  return { success: true, saved: data?.length || 0, data };
};

const DataImportTool: React.FC = () => {
  const { dispatch } = useData();
  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);
  const [isImporting, setIsImporting] = useState(false);
  const [importResult, setImportResult] = useState<any | null>(null);
  const [step, setStep] = useState<'upload' | 'preview' | 'importing' | 'complete' | 'csvInspector'>('upload');
  const [error, setError] = useState<string | null>(null);
  const [importType, setImportType] = useState<'excel' | 'csv'>('excel');
  const [dataType, setDataType] = useState<'auto' | 'contact' | 'case' | 'hearing' | 'invoice' | 'document'>('auto');
  const [selectedCsvFile, setSelectedCsvFile] = useState<File | null>(null);
  const [showFormatHelp, setShowFormatHelp] = useState(false);
  const [showFormatGuide, setShowFormatGuide] = useState(false);
  const [showHelpText, setShowHelpText] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      setSelectedFiles([e.target.files[0]]);
      setError(null);
    }
  };
  
  const handleImportTypeChange = (type: 'excel' | 'csv') => {
    setImportType(type);
    setSelectedFiles([]);
    setError(null);
    
    // Reset file input
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const handleUpload = async () => {
    if (selectedFiles.length === 0) {
      setError('Please select file(s) to import');
      return;
    }

    // Validate file types
    if (importType === 'excel' && !selectedFiles[0].name.endsWith('.xlsx')) {
      setError('Please upload an Excel file (.xlsx)');
      return;
    }

    setError(null);
    
    try {
      if (importType === 'excel') {
        setStep('preview');
        setIsImporting(true);
        const result = await importFromExcel(selectedFiles);
        setImportResult(result);
        setIsImporting(false);
        
        if (result.success) {
          setStep('preview');
        } else {
          setError('Import failed. Please check the file format and try again.');
          setStep('upload');
        }
      } else {
        // For CSV, show the inspector first 
        setSelectedCsvFile(selectedFiles[0]);
        setStep('csvInspector');
      }
    } catch (err) {
      setError(`Import error: ${err instanceof Error ? err.message : String(err)}`);
      setIsImporting(false);
      setStep('upload');
    }
  };

  const handleCsvImportComplete = async (mappedData: any, fileType: string) => {
    setIsImporting(true);

    try {
      const effectiveDataType = dataType === 'auto' ? fileType : dataType;
      
      console.log('CSV Import Complete - Debug Info:');
      console.log('- File type detected:', fileType);
      console.log('- Data type selected:', dataType);
      console.log('- Effective data type:', effectiveDataType);
      console.log('- Mapped data length:', mappedData?.length);
      console.log('- First mapped item:', mappedData?.[0]);

      const result = routeImport(effectiveDataType, mappedData);
      
      console.log('- Import result:', result);
      console.log('- Contacts found:', result.entities.contacts.length);

      setImportResult(result);
      
      if (mappedData && mappedData.length > 0) {
        setStep('preview');
      } else {
        setError('No data was mapped. Please check your column mappings.');
        setStep('csvInspector');
      }
    } catch (err) {
      setError(`CSV import error: ${err instanceof Error ? err.message : String(err)}`);
      setStep('upload');
    } finally {
      setIsImporting(false);
    }
  };

  const handleImport = async () => {
    if (!importResult) return;

    setIsImporting(true);
    setStep('importing');

    try {
      // Import data into the application
      const { entities } = importResult;

      // console.log('Importing data:', {
      //   cases: entities.cases.length, 
      //   hearings: entities.hearings.length,
      //   documents: entities.documents.length,
      //   serviceLogs: entities.serviceLogs.length,
      //   invoices: entities.invoices.length,
      //   paymentPlans: entities.paymentPlans.length,
      //   contacts: entities.contacts.length
      // });

      // Check if we have any data to display
      if (entities.cases.length === 0) {
        // 'No cases found in import');
      }
      
      // Validate and enhance imported cases data
      const enhancedCases = entities.cases.map(caseItem => {
        // Ensure each case has required fields
        return {
          ...caseItem,
          // Generate required fields if they don't exist
          caseId: caseItem.caseId || caseItem.id || `case-${Math.random().toString(36).substring(2, 11)}`,
          id: caseItem.id || caseItem.caseId || `case-${Math.random().toString(36).substring(2, 11)}`,
          title: caseItem.title || caseItem.caseName || caseItem.name || 'Untitled Case',
          status: caseItem.status || 'SPS NOT SERVED',
          createdAt: caseItem.createdAt || new Date().toISOString(),
          updatedAt: caseItem.updatedAt || new Date().toISOString()
        };
      });

      // Validate and enhance imported contacts data
      const enhancedContacts = entities.contacts.map(contactItem => {
        // Ensure each contact has required fields
        return {
          ...contactItem,
          // Generate required fields if they don't exist
          contactId: contactItem.contactId || contactItem.id || `contact-${Math.random().toString(36).substring(2, 11)}`,
          id: contactItem.id || contactItem.contactId || `contact-${Math.random().toString(36).substring(2, 11)}`,
          name: contactItem.name || 'Unknown Contact',
          role: contactItem.role || 'Other',
          email: contactItem.email || '',
          phone: contactItem.phone || '',
          createdAt: contactItem.createdAt || new Date().toISOString(),
          updatedAt: contactItem.updatedAt || new Date().toISOString()
        };
      });

      // 'Enhanced contacts:', enhancedContacts);

      // Save entities to Supabase if we have any
      if (enhancedContacts.length > 0) {
        console.log('Saving contacts to Supabase...', enhancedContacts);
        try {
          const supabaseResult = await saveContactsToSupabase(enhancedContacts);
          console.log('Contacts saved/updated in Supabase:', supabaseResult);
        } catch (error) {
          console.error('Failed to save contacts to Supabase:', error);
          // Continue with local save even if Supabase fails
        }
      }

      if (enhancedCases.length > 0) {
        // 'Saving cases to Supabase...');
        try {
          const supabaseResult = await saveCasesToSupabase(enhancedCases);
          // 'Cases saved/updated in Supabase:', supabaseResult);
        } catch (error) {
          // Error: 'Failed to save cases to Supabase:', error);
          // Continue with local save even if Supabase fails
        }
      }

      if (entities.hearings.length > 0) {
        // 'Saving hearings to Supabase...');
        try {
          const supabaseResult = await saveHearingsToSupabase(entities.hearings);
          // 'Hearings saved/updated in Supabase:', supabaseResult);
        } catch (error) {
          // Error: 'Failed to save hearings to Supabase:', error);
          // Continue with local save even if Supabase fails
        }
      }

      if (entities.documents.length > 0) {
        // 'Saving documents to Supabase...');
        try {
          const supabaseResult = await saveDocumentsToSupabase(entities.documents);
          // 'Documents saved/updated in Supabase:', supabaseResult);
        } catch (error) {
          // Error: 'Failed to save documents to Supabase:', error);
          // Continue with local save even if Supabase fails
        }
      }

      // Load all the data in a single dispatch
      console.log('Dispatching LOAD_DATA with contacts:', enhancedContacts.length);
      dispatch({
        type: 'LOAD_DATA',
        payload: {
          cases: enhancedCases,
          hearings: entities.hearings,
          documents: entities.documents,
          serviceLogs: entities.serviceLogs,
          invoices: entities.invoices,
          paymentPlans: entities.paymentPlans,
          contacts: enhancedContacts,
          zoomLinks: [], // Not directly imported
          workflows: [], // Not directly imported
          workflowTasks: [], // Not directly imported
          documentTemplates: [], // Not directly imported
          documentGenerations: [], // Not directly imported
          calendarEvents: [], // Not directly imported
          calendarIntegrations: [], // Not directly imported
          notifications: [], // Not directly imported
          notificationSettings: {
            hearingReminders: true,
            deadlineReminders: true,
            documentUpdates: true,
            workflowUpdates: true,
            systemAnnouncements: true,
            emailNotifications: false,
            advanceHearingReminder: 24,
            advanceDeadlineReminder: 48,
          },
          auditLogs: [] // New audit logs will be generated during import
        }
      });
      
      // Add an audit log entry
      const totalImported = enhancedCases.length + enhancedContacts.length + entities.hearings.length + entities.documents.length + entities.invoices.length;
      const importDetails = [];
      if (enhancedCases.length > 0) importDetails.push(`${enhancedCases.length} cases`);
      if (enhancedContacts.length > 0) importDetails.push(`${enhancedContacts.length} contacts`);
      if (entities.hearings.length > 0) importDetails.push(`${entities.hearings.length} hearings`);
      if (entities.documents.length > 0) importDetails.push(`${entities.documents.length} documents`);
      if (entities.invoices.length > 0) importDetails.push(`${entities.invoices.length} invoices`);
      
      dispatch({
        type: 'ADD_AUDIT_LOG',
        payload: {
          id: uuidv4(),
          timestamp: new Date().toISOString(),
          action: 'IMPORT_DATA',
          entityType: 'MIXED',
          entityId: 'BULK_IMPORT',
          userId: 'CURRENT_USER', // In a real app, this would be the current user's ID
          details: `Imported ${importDetails.join(', ')}`,
          changes: { added: totalImported }
        }
      });
      
      // Log success message
      // 'Data import completed successfully!');

      setStep('complete');
    } catch (err) {
      setError(`Error applying import: ${err instanceof Error ? err.message : String(err)}`);
      setStep('preview');
    } finally {
      setIsImporting(false);
    }
  };

  const handleReset = () => {
    setSelectedFiles([]);
    setImportResult(null);
    setStep('upload');
    setError(null);
    setSelectedCsvFile(null);
    
    // Reset file input
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="max-w-4xl mx-auto">

      <Card className="p-6">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-semibold">Data Import</h2>
          <div className="flex space-x-2">
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => setShowFormatGuide(true)}
            >
              <HelpCircle className="w-4 h-4 mr-1" />
              Format Guide
            </Button>
            {step !== 'upload' && (
              <Button variant="outline" onClick={handleReset} size="sm">
                Start Over
              </Button>
            )}
          </div>
        </div>

        {error && (
          <div className="mb-6 p-4 bg-error-50 text-error-700 rounded-md border border-error-200 flex items-start">
            <AlertCircle className="w-5 h-5 mr-2 flex-shrink-0 mt-0.5" />
            <p>{error}</p>
          </div>
        )}

        {step === 'upload' && (
          <div className="space-y-6">
            <div className="flex space-x-4 mb-6">
              <button
                type="button"
                onClick={() => handleImportTypeChange('excel')}
                className={`flex items-center px-4 py-2 rounded-md border ${
                  importType === 'excel'
                    ? 'bg-primary-50 text-primary-600 border-primary-200'
                    : 'bg-neutral-50 text-neutral-600 border-neutral-200'
                }`}
              >
                <FileSpreadsheet className="w-5 h-5 mr-2" />
                Excel Import
              </button>
              
              <button
                type="button"
                onClick={() => handleImportTypeChange('csv')}
                className={`flex items-center px-4 py-2 rounded-md border ${
                  importType === 'csv'
                    ? 'bg-primary-50 text-primary-600 border-primary-200'
                    : 'bg-neutral-50 text-neutral-600 border-neutral-200'
                }`}
              >
                <FileText className="w-5 h-5 mr-2" />
                CSV Import
              </button>
            </div>

            {/* Data Type Selector - Professional */}
            <div className="mb-6">
              <Select
                label="Data Type"
                value={dataType}
                onChange={(value) => setDataType(value as DataType)}
                options={[
                  { 
                    value: 'auto', 
                    label: 'Auto-detect from file content' 
                  },
                  { 
                    value: 'contact', 
                    label: 'Contacts - Client and party information' 
                  },
                  { 
                    value: 'case', 
                    label: 'Cases - Legal case records' 
                  },
                  { 
                    value: 'hearing', 
                    label: 'Hearings - Court dates and outcomes' 
                  },
                  { 
                    value: 'invoice', 
                    label: 'Invoices - Billing and payment records' 
                  },
                  {
                    value: 'document',
                    label: 'Documents - Legal documents and files'
                  }
                ]}
                required
              />
            </div>
            
            <div className="border-2 border-dashed border-neutral-300 rounded-md p-8 hover:border-neutral-400 transition-colors">
              <div className="flex items-start space-x-4">
                <Upload className="h-12 w-12 text-neutral-400 flex-shrink-0" />
                <div className="flex-1">
                  <div className="text-base">
                    <label
                      htmlFor="file-upload"
                      className="relative cursor-pointer rounded-md font-medium text-primary-600 hover:text-primary-500"
                    >
                      <span>Upload {importType === 'excel' ? 'Excel' : 'CSV'} file</span>
                      <input
                        id="file-upload"
                        name="file-upload"
                        type="file"
                        className="sr-only"
                        accept={importType === 'excel' ? '.xlsx' : '.csv'}
                        onChange={handleFileChange}
                        multiple={false}
                        ref={fileInputRef}
                      />
                    </label>
                    <span className="text-neutral-500"> or drag and drop</span>
                  </div>
                  <p className="text-sm text-neutral-500 mt-1">
                    {importType === 'excel' 
                      ? 'Excel file (.xlsx) containing your data'
                      : 'CSV file (.csv) containing your data'
                    }
                  </p>
                  {importType === 'csv' && (
                    <p className="text-sm text-blue-600 mt-2">
                      CSV files will show a preview where you can map columns
                    </p>
                  )}
                </div>
              </div>
            </div>

            {selectedFiles.length > 0 && (
              <div className="bg-neutral-50 rounded-md p-4">
                <h4 className="text-sm font-medium text-neutral-700 mb-2">Selected Files</h4>
                <div className="space-y-2 max-h-48 overflow-y-auto">
                  {selectedFiles.map((file, index) => (
                    <div key={index} className="flex items-center">
                      <FileText className="w-5 h-5 text-neutral-500 mr-2" />
                      <span className="font-medium">{file.name}</span>
                      <span className="ml-2 text-neutral-500 text-sm">
                        ({Math.round(file.size / 1024)} KB)
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            <div className="flex justify-end">
              <Button 
                variant="primary" 
                onClick={handleUpload} 
                disabled={selectedFiles.length === 0 || isImporting}
              >
                {isImporting ? 'Analyzing...' : 'Next'}
              </Button>
            </div>
          </div>
        )}

        {step === 'csvInspector' && selectedCsvFile && (
          <CSVDataInspector 
            file={selectedCsvFile}
            onClose={handleReset}
            onImport={handleCsvImportComplete}
          />
        )}

        {step === 'preview' && importResult && (
          <div className="space-y-6">
            <h3 className="text-xl font-semibold">Import Preview</h3>
            
            {/* Import metrics display */}
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              <Card className="p-4">
                <div className="flex items-center space-x-3">
                  <FileText className="w-8 h-8 text-neutral-500" />
                  <div>
                    <p className="text-2xl font-semibold">{importResult.entities.cases.length}</p>
                    <p className="text-sm text-neutral-600">Cases</p>
                  </div>
                </div>
              </Card>
              
              <Card className="p-4">
                <div className="flex items-center space-x-3">
                  <Calendar className="w-8 h-8 text-neutral-500" />
                  <div>
                    <p className="text-2xl font-semibold">{importResult.entities.hearings.length}</p>
                    <p className="text-sm text-neutral-600">Hearings</p>
                  </div>
                </div>
              </Card>
              
              <Card className="p-4">
                <div className="flex items-center space-x-3">
                  <Database className="w-8 h-8 text-neutral-500" />
                  <div>
                    <p className="text-2xl font-semibold">{importResult.entities.documents.length}</p>
                    <p className="text-sm text-neutral-600">Documents</p>
                  </div>
                </div>
              </Card>
              
              <Card className="p-4">
                <div className="flex items-center space-x-3">
                  <Users className="w-8 h-8 text-neutral-500" />
                  <div>
                    <p className="text-2xl font-semibold">{importResult.entities.contacts.length}</p>
                    <p className="text-sm text-neutral-600">Contacts</p>
                  </div>
                </div>
              </Card>
              
              <Card className="p-4">
                <div className="flex items-center space-x-3">
                  <DollarSign className="w-8 h-8 text-neutral-500" />
                  <div>
                    <p className="text-2xl font-semibold">{importResult.entities.invoices.length}</p>
                    <p className="text-sm text-neutral-600">Invoices</p>
                  </div>
                </div>
              </Card>
              
              <Card className="p-4">
                <div className="flex items-center space-x-3">
                  <FileX className="w-8 h-8 text-neutral-500" />
                  <div>
                    <p className="text-2xl font-semibold">{importResult.entities.serviceLogs.length}</p>
                    <p className="text-sm text-neutral-600">Service Logs</p>
                  </div>
                </div>
              </Card>
            </div>
              
            {importResult.warnings && importResult.warnings.length > 0 && (
              <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                <h4 className="text-base font-medium text-yellow-800 mb-2 flex items-center">
                  <AlertCircle className="w-5 h-5 mr-2" />
                  Import Warnings ({importResult.warnings.length})
                </h4>
                <ul className="text-base text-yellow-700 space-y-1">
                  {importResult.warnings.slice(0, 5).map((warning: string, i: number) => (
                    <li key={i} className="flex items-start">
                      <span className="inline-block w-1 h-1 bg-yellow-600 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                      {warning}
                    </li>
                  ))}
                  {importResult.warnings.length > 5 && (
                    <li className="text-yellow-600 font-medium">
                      + {importResult.warnings.length - 5} more warnings...
                    </li>
                  )}
                </ul>
              </div>
            )}
            
            <div className="flex justify-end space-x-4">
              <Button variant="outline" onClick={handleReset}>
                Cancel
              </Button>
              <Button 
                variant="primary" 
                onClick={handleImport} 
                disabled={isImporting}
              >
                {isImporting ? 'Importing...' : 'Import Data'}
              </Button>
            </div>
          </div>
        )}

        {step === 'importing' && (
          <div className="py-8">
            <div className="flex items-center space-x-4">
              <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-primary-600"></div>
              <div>
                <p className="text-neutral-700 font-medium">Importing data...</p>
                <p className="text-sm text-neutral-500 mt-1">
                  This may take a few moments
                </p>
              </div>
            </div>
          </div>
        )}

        {step === 'complete' && (
          <div className="py-8">
            <div className="flex items-start space-x-4">
              <div className="w-16 h-16 flex items-center justify-center rounded-full bg-success-100 flex-shrink-0">
                <CheckCircle className="h-10 w-10 text-success-600" />
              </div>
              <div className="flex-1">
                <h3 className="text-lg font-medium text-neutral-900">Import Complete</h3>
                <p className="text-neutral-600 mt-1">
                  All data has been successfully imported into the system.
                </p>
                <div className="pt-4">
                  <Button variant="primary" onClick={handleReset}>
                    Return to Import Tool
                  </Button>
                </div>
              </div>
            </div>
          </div>
        )}
        
        <ImportFormatGuide 
          isOpen={showFormatGuide} 
          onClose={() => setShowFormatGuide(false)}
          importType={importType}
        />
      </Card>
    </div>
  );
};

export default DataImportTool;